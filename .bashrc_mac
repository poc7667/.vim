# to denote that this is not a super user
# It ends up looking like:
# [unimind : ~] sc 3.2$
# PS1="[\[33[0;37m\]\h : \W] \u \v$ "
# PS1="[\W] $ "
export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD

#fix SSH 連線中文亂碼問題
export LANG=zh_TW.UTF-8

MACBOOK_AIR='Poc-MacBook-Air-2013.local'
MACBOOK_AIR_LOCAL='poc-macbook-air'
MAC_PRO="localhost"
export WHO=`uname -a | awk '{print $2}'`

if [ $WHO == $MACBOOK_AIR ];then
USER_HOME='/Users/hsu-wei-cheng'
elif [ $WHO == $MACBOOK_AIR_LOCAL ];then
USER_HOME='/Users/hsu-wei-cheng'
elif    [ $WHO == $MAC_PRO ];then
USER_HOME='/Users/poc'
else
USER_HOME='/Users/hsu-wei-cheng'

fi


# custom function
f(){ find ./ -iname "*$1*" ;  }

# some more ls aliases
if [ -f ~/.bash_aliases ]; then
. ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
. /etc/bash_completion
fi
# auto-completion when you type sudo 
if [ "$PS1" ]; then
complete -cf sudo
fi
alias ls='ls -GF'
alias ll='ls -aGFlt '
#alias f='find ./ -iname '
alias pa='cd '

function papa() {
    cd `dirname $1`
}

#we should use mvim to replace original vim
alias vim='mvim -v '

alias dpx='cd $USER_HOME/Dropbox'
alias jp='cd $USER_HOME/Dropbox/Python/vivotek/vvtk_dqa_rtsp/vvtk_dqa_rtsp'
alias jp='cd $USER_HOME/Dropbox/Python/vivotek/nd_multi_langs/src/nd_multi_langs'
alias jp='cd $USER_HOME/Dropbox/Python/vivotek/tao2tw_repo/src/tao2tw_repo'
alias jp='cd $USER_HOME/Dropbox/Python/vivotek/local_display_multi_langs/src/local_display_multi_langs'
alias jp='cd $USER_HOME/Dropbox/Python/vivotek/middle_rtsp/src/middle_rtsp'
alias jblog='cd $USER_HOME/Dropbox/Rails/vvtk_octopress' 
alias vvtk='cd $USER_HOME/Dropbox/vivotek'
alias jr='cd $USER_HOME/Dropbox/Rails/zeus'
alias jbk='cd $USER_HOME/Dropbox/Rails/project/book_store'
alias jc='cd $USER_HOME/common_lib/rails'
alias jbot='cd $USER_HOME/Dropbox/robot_framework'
alias 777='sudo chmod -R 777 *'
alias sx='cd /Volumes/TOSHIBA\ EXT/Movie\ 電影/_/__/_/__'
alias tao2tw='cd $USER_HOME/Dropbox/Rails/itaoker/tao2tw'
alias tao2tw='cd $USER_HOME/Dropbox/Python/vivotek/tao2tw_repo/src/tao2tw_repo'
alias rv='cd app/views'
alias rc='cd app/controllers'
alias af='cd $USER_HOME/Dropbox/Rails/vivotek/remote_focus_autotest_module/remote_focus_automation'
alias zaf='cd $USER_HOME/Dropbox/Rails/zeus/lib/auto_tools/remote_focus'
alias tealeaf='cd $USER_HOME/Dropbox/Rails/tealeaf/course2'
alias worker='rake resque:work QUEUE='*''

#ssh
alias ascite_ssh='ssh poc@142.4.51.136'
alias linode_ssh='ssh poc@106.186.30.219'

#Rails
alias dbmigrate='rake db:migrate'
alias uproutes='rake routes'
alias reindex='rake sunspot:reindex[,,true]'
alias spotstart='rake sunspot:solr:start '
alias spotstop='rake sunspot:solr:stop '
alias spotrestart='rake sunspot:solr:stop ; rake sunspot:solr:start '

#grep occupied port
alias getport=' lsof -i -n -P | grep "4000\|3000"'

export PYTHONPATH="$USER_HOME/common_lib/python:/usr/local/Cellar/opencv/2.4.5/:$PYTHONPATH"

rvm_project_rvmrc=1

#brew will put bin link in /usr/local/bin 
export PATH="~/bin:/usr/local/bin:HOME/.rvm/bin:/usr/bin:/usr/local/bin:$PATH"

PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
export PKG_CONFIG_PATH

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

#不知道位啥cmake root 爛掉
export CMAKE_ROOT=/usr/local/share/cmake

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting


# Merge Tealeaf 
last_two_dirs() {
    pwd |rev| awk -F / '{print $1,$2}' | rev | sed s_\ _/_
    }
[ -z "$PS1" ] || stty -ixon
# [ -z "$PS1" ] || export PS1="\[\033[01;32m\]\[\033[00m\]\[\033[01;36m\]\w\[\033[00m\]\$(git_prompt_info '(%s)')$ "

[ -z "$PS1" ] || export PS1="\[\033[01;36m\]\w\[\033[00m\]
\$(git_prompt_info '(%s)')$ "
                             

export PROMPT_DIRTRIM=2

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
homebrew=/usr/local/bin:/usr/local/sbin
export PATH=$homebrew:$PATH

# git_prompt_info accepts 0 or 1 arguments (i.e., format string)
# returns text to add to bash PS1 prompt (includes branch name)
git_prompt_info () {
  local g="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    local r
    local b
    local d
    local s
    # Rebasing
    if [ -d "$g/rebase-apply" ] ; then
      if test -f "$g/rebase-apply/rebasing" ; then
        r="|REBASE"
      fi
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    # Interactive rebase
    elif [ -f "$g/rebase-merge/interactive" ] ; then
      r="|REBASE-i"
      b="$(cat "$g/rebase-merge/head-name")"
    # Merging
    elif [ -f "$g/MERGE_HEAD" ] ; then
      r="|MERGING"
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    else
      if [ -f "$g/BISECT_LOG" ] ; then
        r="|BISECTING"
      fi
      if ! b="$(git symbolic-ref HEAD 2>/dev/null)" ; then
        if ! b="$(git describe --exact-match HEAD 2>/dev/null)" ; then
          b="$(cut -c1-7 "$g/HEAD")..."
        fi
      fi
    fi

    # Dirty Branch
    local newfile='?? '
    if [ -n "$ZSH_VERSION" ]; then
      newfile='\?\? '
    fi
    d=''
    s=$(git status --porcelain 2> /dev/null)
    [[ $s =~ "$newfile" ]] && d+='+'
    [[ $s =~ "M " ]] && d+='*'
    [[ $s =~ "D " ]] && d+='-'

    if [ -n "${1-}" ]; then
      printf "$1" "${b##refs/heads/}$r$d"
    else
      printf "(%s) " "${b##refs/heads/}$r$d"
    fi
  fi
}
